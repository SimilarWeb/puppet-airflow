# THIS FILE IS AUTOMATICALLY DISTRIBUTED BY PUPPET.  ANY CHANGES WILL BE OVERWRITTEN.
[core]
# The folder where your airflow pipelines live, most likely a
# subfolder in a code repository
# This path must be absolute
dags_folder = <%= @dags_folder %>

# The folder where airflow should store its log files
# This path must be absolute
base_log_folder = <%= @log_folder %>
# An S3 location can be provided for log backups
# For S3, use the full URL to the base folder (starting with "s3://...")
s3_log_folder = <%= @s3_log_folder %>

# The executor class that airflow should use. Choices include
# SequentialExecutor, LocalExecutor, CeleryExecutor, DaskExecutor, KubernetesExecutor
executor = <%= @executor %>

# The SqlAlchemy connection string to the metadata database.
# SqlAlchemy supports many different database engine, more information
# their website
sql_alchemy_conn = <%= @sql_alchemy_conn %>

# The amount of parallelism as a setting to the executor. This defines
# the max number of task instances that should run simultaneously
# on this airflow installation
parallelism = <%= @parallelism %>

# The number of task instances allowed to run concurrently by the scheduler
dag_concurrency = <%= @dag_concurrency %>

# The maximum number of active DAG runs per DAG
max_active_runs_per_dag = <%= @max_active_runs_per_dag %>

# Whether to load the examples that ship with Airflow. It's good to
# get started, but you probably want to set this to False in a production
# environment
load_examples = <%= @load_examples %>

# Where your Airflow plugins are stored
plugins_folder = <%= @plugins_folder %>

# Secret key to save connection passwords in the db
fernet_key = <%= @fernet_key %>

# Whether to disable pickling dags
donot_pickle = <%= @donot_pickle %>

[webserver]
# The base url of your website as airflow cannot guess what domain or
# cname you are using. This is used in automated emails that
# airflow sends to point links to the right web server
base_url = <%= @base_url %>

# The ip specified when starting the web server
web_server_host = <%= @web_server_host %>

# The port on which to run the web server
web_server_port = <%= @web_server_port %>

# Number of seconds the gunicorn webserver waits before timing out on a worker
web_server_worker_timeout = 120

# Secret key used to run your flask app
secret_key =  <%= @secret_key %>


# Number of workers to run the Gunicorn web server
workers = <%= @gunicorn_workers %>

# The worker class gunicorn should use. Choices include
# sync (default), eventlet, gevent
worker_class = <%= @worker_class %>

# Expose the configuration file in the web server
expose_config = <%= @expose_config %>

# Use FAB-based webserver with RBAC authentication
# Settings are kept in webserver_config.py
rbac = <%= @authenticate %>

# Filter the list of dags by owner name (requires authentication to be enabled)
filter_by_owner = <%= @filter_by_owner %>

# Enable werkzeug `ProxyFix` middleware
enable_proxy_fix = <%= @proxy_fix -%>

[smtp]
# If you want airflow to send emails on retries, failure, and you want to
# the airflow.utils.send_email function, you have to configure an smtp
# server here
smtp_host = <%= @smtp_host %>
smtp_starttls = <%= @smtp_starttls %>

smtp_user = <%= @smtp_user %>
smtp_port = <%= @smtp_port %>
smtp_password = <%= @smtp_password %>
smtp_mail_from = <%= @smtp_mail_from %>

[celery]
# This section only applies if you are using the CeleryExecutor in
# [core] section above

# Enable / Disable CeleryExecutor with SSL.
# Ensure you properly generate client and server certs and keys.
#
# TODO:
# * configure 'celery_ssl_active' by params
# * setup an SSL key and certs
#
# celery_ssl_cacert = <%= @celery_ssl_cacert %>
# celery_ssl_cert = <%= @celery_ssl_cert %>
# celery_ssl_key = <%= @celery_ssl_key %>
celery_ssl_active = false

# The app name that will be used by celery
celery_app_name = <%= @celery_app_name %>

# The concurrency that will be used when starting workers with the
# "airflow worker" command. This defines the number of task instances that
# a worker will take, so size up your workers based on the resources on
# your worker box and the nature of your tasks
worker_concurrency = <%= @worker_concurrency %>

# When you start an airflow worker, airflow starts a tiny web server
# subprocess to serve the workers local log files to the airflow main
# web server, who then builds pages and sends them to users. This defines
# the port on which the logs are served. It needs to be unused, and open
# visible from the main web server to connect into the workers.
worker_log_server_port = <%= @worker_log_server_port %>

# The Celery broker URL. Celery supports RabbitMQ, Redis and experimentally
# a sqlalchemy database. Refer to the Celery documentation for more
# information.
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#broker-settings
broker_url = <%= @broker_url %>

# The Celery result_backend. When a job finishes, it needs to update the
# metadata of the job. Therefore it will post a message on a message bus,
# or insert it into a database (depending of the backend)
# This status is used by the scheduler to update the state of the task
# The use of a database is highly recommended
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#task-result-backend-settings
result_backend = <%= @result_backend %>

# Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start
# it `airflow flower`. This defines the IP that Celery Flower runs on
flower_host = <%= @web_server_host %>

# The root URL for Flower
# Ex: flower_url_prefix = /flower
# https://airflow.apache.org/howto/run-behind-proxy.html
flower_url_prefix = <%= @flower_url_prefix %>

# This defines the port that Celery Flower runs on
flower_port = <%= @flower_port %>

# Default queue that tasks get assigned to and that worker listen on.
default_queue = <%= @default_queue %>

[scheduler]
# Task instances listen for external kill signal (when you clear tasks
# from the CLI or the UI), this defines the frequency at which they should
# listen (in seconds).
job_heartbeat_sec = <%= @job_heartbeat_sec %>

# The scheduler constantly tries to trigger new tasks (look at the
# scheduler section in the docs for more information). This defines
# how often the scheduler should run (in seconds).
scheduler_heartbeat_sec = <%= @scheduler_heartbeat_sec %>

# Turn off scheduler catchup by setting this to False.
# Default behavior is unchanged and
# Command Line Backfills still work, but the scheduler
# will not do scheduler catchup if this is False,
# however it can be set on a per DAG basis in the
# DAG definition (catchup)
catchup_by_default = <%= @catchup %>

<% if @statsd_settings['statsd_on'] -%>
# Statsd (https://github.com/etsy/statsd) integration settings
statsd_on =  <%= @statsd_settings['statsd_on'] %>
statsd_host =  <%= @statsd_settings['statsd_host'] %>
statsd_port =  <%= @statsd_settings['statsd_port'] %>
statsd_prefix = <%= @statsd_settings['statsd_prefix'] %>
<% end %>

<% if !@mesos_settings.empty? -%>
[mesos]
# Mesos master address which MesosExecutor will connect to.
master = <%= @mesos_settings['master'] %>

# The framework name which Airflow scheduler will register itself as on mesos
framework_name = <%= @mesos_settings['framework_name'] %>

# Number of cpu cores required for running one task instance using
# 'airflow run <dag_id> <task_id> <execution_date> --local -p <pickle_id>'
# command on a mesos slave
task_cpu = <%= @mesos_settings['task_cpu'] %>

# Memory in MB required for running one task instance using
# 'airflow run <dag_id> <task_id> <execution_date> --local -p <pickle_id>'
# command on a mesos slave
task_memory = <%= @mesos_settings['task_memory'] %>

# Enable framework checkpointing for mesos
# See http://mesos.apache.org/documentation/latest/slave-recovery/
checkpoint = <%= @mesos_settings['checkpoint'] %>

<% if @mesos_settings['checkpoint'] -%>
# Failover timeout in milliseconds.
# When checkpointing is enabled and this option is set, Mesos waits until the configured timeout for
# the MesosExecutor framework to re-register after a failover. Mesos shuts down running tasks if the
# MesosExecutor framework fails to re-register within this timeframe.
failover_timeout = <%= @mesos_settings['failover_timeout'] %>
<% end %>

# Enable framework authentication for mesos
# See http://mesos.apache.org/documentation/latest/configuration/
authenticate = <%= @mesos_settings['authenticate'] %>

<% if @mesos_settings['authenticate'] -%>
# Mesos credentials, if authentication is enabled
 default_principal = <%= @mesos_settings['default_principal'] %>
 default_secret =  <%= @mesos_settings['default_secret'] %>
<% end %>
<% end %>
